#include<iostream>
#include<cstring>
#include<memory>
#include<tuple>
using namespace std;

//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)


enum VrstaAktivnosti { Tehnike, Kata, Borba };
const char *charVrstaAktivnosti[] = { "Tehnike", "Kata", "Borba" };
enum Pojas { Zuti, Narandzasti, Zeleni, Plavi, Smedji, Crni };
const char *charPojas[] = { "Zuti", "Narandzasti", "Zeleni", "Plavi", "Smedji", "Crni" };

struct Datum {
	int *_dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	int getDane() { return *_dan + *_mjesec*30 + *_godina*365; }
	void Dealociraj() { delete _dan; delete _mjesec; delete _godina; }
};
struct Aktivnost {
	unique_ptr<VrstaAktivnosti> _vrsta;
	Datum _datumIzvrsenja;
	char *_nazivOpis;
	int _ocjena; // 1 - 10
	void Unos(VrstaAktivnosti vrsta, Datum *datum, int ocjena, const char *nazivOpis) {
	    _vrsta = make_unique<VrstaAktivnosti>(vrsta);
		_datumIzvrsenja.Unos(*datum->_dan, *datum->_mjesec, *datum->_godina);
		_ocjena = ocjena;
		_nazivOpis = new char[strlen(nazivOpis)+1];
		strcpy(_nazivOpis, nazivOpis);
	}
	void Ispis() {
		cout <<charVrstaAktivnosti[*_vrsta] << " | Ocjena: " << _ocjena << " | " << _nazivOpis << " | ";
		_datumIzvrsenja.Ispis();
		cout << endl;
	}
	void Dealociraj() {
		_datumIzvrsenja.Dealociraj();
		delete[] _nazivOpis; _nazivOpis = nullptr;
	}
};
struct KaratePojas {
	Datum *_datumPolaganja; //datum koji ce se evidentirati kao datum polaganja pojasa tj. kada su ispunjene sve aktivnosti/obaveze
	Pojas _pojas;
	Aktivnost *_listaIzvrsenihAktivnosti;
	int _trenutnoIzvrsenihAktivnosti;
	void Unos(Pojas pojas) {
		_datumPolaganja = nullptr;
		_pojas = pojas;
		_listaIzvrsenihAktivnosti = nullptr;
		_trenutnoIzvrsenihAktivnosti = 0;
	}
	void Dealociraj() {
	    if(_datumPolaganja != nullptr){
            _datumPolaganja->Dealociraj(); delete _datumPolaganja; _datumPolaganja = nullptr;
            for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
                _listaIzvrsenihAktivnosti[i].Dealociraj();
            delete[] _listaIzvrsenihAktivnosti;
            _listaIzvrsenihAktivnosti = nullptr;
	    }
	}
	void Ispis() {
	    cout<<endl;
		cout << charPojas[_pojas] <<" pojas"<< endl;
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Ispis();
		cout<<"Datum polaganja: "; _datumPolaganja->Ispis();
	}

	bool DodajIzvrsenuAktivnost(Aktivnost *aktivnost){
	    if(_datumPolaganja != nullptr) return false; //ako je pojas polozen datum polaganja mora biti unesen

        for(int i=0; i<_trenutnoIzvrsenihAktivnosti; i++){
            if(*_listaIzvrsenihAktivnosti[i]._vrsta == *aktivnost->_vrsta
               && aktivnost->_datumIzvrsenja.getDane() - _listaIzvrsenihAktivnosti[i]._datumIzvrsenja.getDane() < 15)
                    return false; //nije proslo 15 dana od dodavanja posljednje aktivnosti iste vrste;

            if(_listaIzvrsenihAktivnosti[i]._vrsta == aktivnost->_vrsta
               && _listaIzvrsenihAktivnosti[i]._datumIzvrsenja.getDane() == aktivnost->_datumIzvrsenja.getDane()
               && _listaIzvrsenihAktivnosti[i]._ocjena > 5)
                    return false; //aktivnosti su iste vrste i istog datuma ali vec unesena ocjena je veca od 5;
        }

        Aktivnost *temp = new Aktivnost[_trenutnoIzvrsenihAktivnosti+1];
        for(int i=0; i<_trenutnoIzvrsenihAktivnosti; i++){
            temp[i].Unos(*_listaIzvrsenihAktivnosti[i]._vrsta, &_listaIzvrsenihAktivnosti[i]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i]._ocjena, _listaIzvrsenihAktivnosti[i]._nazivOpis);
            _listaIzvrsenihAktivnosti[i].Dealociraj();
        }
        temp[_trenutnoIzvrsenihAktivnosti].Unos(*aktivnost->_vrsta, &aktivnost->_datumIzvrsenja, aktivnost->_ocjena, aktivnost->_nazivOpis);
        _listaIzvrsenihAktivnosti = temp;
        _trenutnoIzvrsenihAktivnosti++;
        return true;
	}
	bool DaLiJePolozen(){
	    int aktivnosti[3] = {0};
        int negativne[3] = {0};
        Datum datumPolaganja;
	    for(int i=0; i<_trenutnoIzvrsenihAktivnosti; i++){
            if(_listaIzvrsenihAktivnosti[i]._ocjena > 5){
                aktivnosti[*_listaIzvrsenihAktivnosti[i]._vrsta]++;
                datumPolaganja.Unos(*_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._dan, *_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._mjesec, *_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._godina);
            }
            if(_listaIzvrsenihAktivnosti[i]._ocjena < 6)
                negativne[*_listaIzvrsenihAktivnosti[i]._vrsta]++;
	    }
        for(int i=0; i<3; i++){
            if(negativne[i] > 2 || aktivnosti[i] < (int)_pojas+1)
                return false;
        }
        _datumPolaganja = new Datum;
        _datumPolaganja->Unos(*datumPolaganja._dan, *datumPolaganja._mjesec, *datumPolaganja._godina);
        return true;
	}

	void Sortiraj(){
	    for(int i=0; i<_trenutnoIzvrsenihAktivnosti; i++){
            for(int j=i+1; j<_trenutnoIzvrsenihAktivnosti; j++){
                if(_listaIzvrsenihAktivnosti[j]._ocjena > _listaIzvrsenihAktivnosti[i]._ocjena){
                    swap(_listaIzvrsenihAktivnosti[j], _listaIzvrsenihAktivnosti[i]);
                }
            }
	    }
	}

    float PretragaRekurzivno(const char *target, int brojac = 0, int brojUspjesnih = 0, float suma = 0){
        if(brojac == _trenutnoIzvrsenihAktivnosti){
            if(brojac == 0)
                return 0;
            return (float)suma / brojUspjesnih;
        }
        if(strstr(_listaIzvrsenihAktivnosti[brojac]._nazivOpis, target) != nullptr && _listaIzvrsenihAktivnosti[brojac]._ocjena > 5)
            return PretragaRekurzivno(target, brojac+1, brojUspjesnih+1, suma+_listaIzvrsenihAktivnosti[brojac]._ocjena);
        return PretragaRekurzivno(target, brojac+1, brojUspjesnih, suma);
    }

    void KopirajPojas(KaratePojas pojas){
        Unos(pojas._pojas);
        _trenutnoIzvrsenihAktivnosti = pojas._trenutnoIzvrsenihAktivnosti;
        _listaIzvrsenihAktivnosti = new Aktivnost[pojas._trenutnoIzvrsenihAktivnosti];
        for(int i=0; i<pojas._trenutnoIzvrsenihAktivnosti; i++)
            _listaIzvrsenihAktivnosti[i].Unos(*pojas._listaIzvrsenihAktivnosti[i]._vrsta, &pojas._listaIzvrsenihAktivnosti[i]._datumIzvrsenja, pojas._listaIzvrsenihAktivnosti[i]._ocjena, pojas._listaIzvrsenihAktivnosti[i]._nazivOpis);
        if(pojas._datumPolaganja != nullptr)
            DaLiJePolozen();
    }
};

struct Kandidat {
	char *_imePrezime;
	shared_ptr<KaratePojas> _pojasevi[6];
	void Unos(const char *imePrezime) {
		_imePrezime = new char[strlen(imePrezime)+1];
		strcpy(_imePrezime, imePrezime);
		for (size_t i = 0; i < 6; i++)
			_pojasevi[i] = nullptr;
	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < 6; i++)
			if (_pojasevi[i] != nullptr) {
				_pojasevi[i]->Dealociraj();
				_pojasevi[i].reset();
			}
	}
	void Ispis() {
		cout << _imePrezime << endl;
		for (size_t i = 0; i < 6; i++)
			if (_pojasevi[i] != nullptr)
				_pojasevi[i]->Ispis();
	}
	bool DodajPojas(KaratePojas pojas){
        auto ProvjeraLokacije = [this, pojas](){
            for(int i=0; i<6; i++){
                if(_pojasevi[i] == nullptr){
                    if(i == (int)pojas._pojas){
                        return i;
                    }
                    return -1;
                }
            }
            return -1;
        };
        int lokacija = ProvjeraLokacije();
        if(lokacija != -1){
            _pojasevi[lokacija] = make_shared<KaratePojas>();
            _pojasevi[lokacija]->KopirajPojas(pojas);
            return true;
        }
        return false;
	}
	
    pair<Pojas, float>GetNajbolji(){
        Pojas pojas;
        float prosjek = 0;
        for(int i=0; i<6; i++){
            if(_pojasevi[i] != nullptr){
                float trenutniProsjek = 0;
                int brojac = 0;
                for(int j=0; j<_pojasevi[i]->_trenutnoIzvrsenihAktivnosti; j++){
                    if(_pojasevi[i]->_listaIzvrsenihAktivnosti[j]._ocjena > 5){
                        trenutniProsjek+=_pojasevi[i]->_listaIzvrsenihAktivnosti[j]._ocjena;
                        brojac++;
                    }
                }
                trenutniProsjek /= brojac;
                if(trenutniProsjek > prosjek){
                    prosjek = trenutniProsjek;
                    pojas = _pojasevi[i]->_pojas;
                }
            }
        }
        return pair<Pojas, float>(pojas, prosjek);
    }
};

int main() {
	Datum datumPolaganja1, datumPolaganja2, datumPolaganja3, datumPolaganja4;
	datumPolaganja1.Unos(10, 6, 2018);
	datumPolaganja2.Unos(18, 6, 2018);
	datumPolaganja3.Unos(22, 3, 2018);
	datumPolaganja4.Unos(22, 7, 2018);

	Aktivnost aktivnost1, aktivnost2, aktivnost3, aktivnost4, aktivnost5;
	aktivnost1.Unos(Tehnike, &datumPolaganja1, 6, "Tehnike za zuti pojas");
	aktivnost2.Unos(Kata, &datumPolaganja1, 8, "Taiki joko shodan - zuti pojas");
	aktivnost3.Unos(Borba, &datumPolaganja1, 2, "Jednostavne borbene tehnike sa partnerom");
	aktivnost4.Unos(Borba, &datumPolaganja1, 6, "Jednostavne borbene tehnike sa partnerom");
	aktivnost5.Unos(Borba, &datumPolaganja4, 6, "Jednostavne borbene tehnike sa partnerom");

	KaratePojas pojasZuti, pojasNarandzasti, pojasZeleni;
	pojasZuti.Unos(Zuti);

	/*Na osnovu vrijednosti primljenog parametra osigurati dodavanje novoizvrsene aktivnosti za potrebe stjecanja odredjenog pojasa. Broj aktivnosti nije ogranicen.
	Identicna aktivnost se moze dodati jedino u slucaju kada je prethodna (identivna aktivnost po vrsti i datumu izvrsenja) imala ocjenu manju od 6.
	Uspjesnom aktivnoscu se smatraju one aktivnosti koje imaju ocjenu vecu od 5, a svaka naredna identicna aktivnost, bez obzira da li je uspjesna ili ne,
	moze biti dodana jedino ako je proslo najmanje 15 dana od izvrsenja prethodne. Onemoguciti dodavanje aktivnosti uspjesno polozenom pojasu.*/
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost1))
		cout << "Aktivnost1 uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost2))
		cout << "Aktivnost2 uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost3))
		cout << "Aktivnost3 uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost4))//15 dana...
		cout << "Aktivnost4 uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost5))
		cout << "Aktivnost5 uspjesno dodana!" << endl;

	//Koristeci neki od obradjenih algoritama, po ocjeni sortirati aktivnosti u okviru odredjenog pojasa
	pojasZuti.Sortiraj();


	/* Karate pojas zahtijeva uspjesnu realizaciju svih planiranih aktivnosti, a one se za jedan povecavaju sa svakim novim pojasom, npr.
	zuti pojas: 1 x tehnika, 1 x kata, 1 x borba;	narandzasti pojas: 2 x tehnika, 2 x kata, 2 x borba; i td...
	Funkcija vraca false u slucaju da: su kandidatu u listu aktivnosti evidentirane tri negativno ocijenjene identicne vrste aktivnosti
	(npr. tri negativne ocjene iz borbi), onda se taj pojas ne moze smatrati uspjesno stecenim, te ukoliko nedostaje bilo koja od aktivnosti zahtijevanih u okviru tog pojasa.
	Ukoliko je kandidat uspjesno realizovao sve aktivnost, datum polaganja se postavlja na datum posljednje uspjesno realizovane aktivnosti */
	if (pojasZuti.DaLiJePolozen())
		pojasZuti.Ispis();

	/*Funkcija vraca prosjecnu ocjenu svih uspjesno realizovanih aktivnosti koja u nazivu ili opisu sadrze vrijednost primljenog parametra.
        Ukoliko smatrate da je potrebno, mozete dodati i druge parametre za potrebe implementacije ove funkcije*/
	cout << "Prosjecna ocjena za zuti pojas -> " << pojasZuti.PretragaRekurzivno("pojas") << endl;

	//ispisuje sve dostupne podatke o pojasu
	pojasZuti.Ispis();
    cout<<endl<<endl;

	Kandidat jasmin;
	jasmin.Unos("Jasmin Azemovic");
	/* Karate pojasevi se moraju dodavati po redoslijedu tj. ne smije se dozvoliti dodavanje zelenog pojasa ukoliko prethodno nije dodan zuti i narandzasti.
        Za provjeru lokacije (unutar funkcije DodajPojas) na koju ce se dodati novi karate pojas, te da li su nizi pojasevi prethodno dodani koristiti lambda funkciju. */
	if (jasmin.DodajPojas(pojasZuti))
		cout << "Zuti pojas uspjesno dodan!" << endl;
	if (jasmin.DodajPojas(pojasZeleni)) //prethodno je trebao biti dodan narandzasti pojas
		cout << "Zeleni pojas uspjesno dodan!" << endl;
	if (jasmin.DodajPojas(pojasNarandzasti)) //nece biti dodan jer nisu ispunjenje aktivnosti
		cout << "Narandzasti pojas uspjesno dodan!" << endl;
    cout<<endl;

	float prosjek = 0;
	Pojas pojas;
	//Funkcija GetNajbolji vraca par koji sadrzi oznaku i prosjecnu ocjenu (uspjesno okoncanih aktivnosti) pojasa sa najvecim prosjekom
	tie(pojas, prosjek) = jasmin.GetNajbolji();
	cout << endl << endl << "Najbolji rezultat od " << prosjek << " je ostvaren tokom stjecanja pojasa " << charPojas[pojas] <<" pojas" << endl;


    datumPolaganja1.Dealociraj(), datumPolaganja2.Dealociraj(), datumPolaganja3.Dealociraj(), datumPolaganja4.Dealociraj();
    aktivnost1.Dealociraj(), aktivnost2.Dealociraj(), aktivnost3.Dealociraj(), aktivnost4.Dealociraj(), aktivnost5.Dealociraj();
    pojasZuti.Dealociraj(), pojasNarandzasti.Dealociraj(), pojasZeleni.Dealociraj();
    jasmin.Dealociraj();

	return 0;
}
