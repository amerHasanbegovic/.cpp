#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;

const char* crt = "\n----------------------------------------------------\n";
struct Datum {
	int* _dan, * _mjesec, * _godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	void Dealociraj() {
		delete _dan; delete _mjesec; delete _godina;
		_dan = _mjesec = _godina = nullptr;
	}
	int getDane() { return *_dan + *_mjesec * 30 + *_godina * 365; }

};
struct Izostanak {
	char* _razlogIzostanka;
	Datum _datumIzostanka;
	int _brojSati;
	bool _opravdano; //pravdanje zahtijeva da se evidentira i razlog izostanka	
	void Unos(Datum datumIzostanka, int brojSati) {
		_datumIzostanka.Unos(*datumIzostanka._dan, *datumIzostanka._mjesec, *datumIzostanka._godina);
		_brojSati = brojSati;
		_opravdano = false;
		_razlogIzostanka = new char;
		_razlogIzostanka[0] = '\0';
	}
	void Dealociraj() { delete[] _razlogIzostanka; _razlogIzostanka = nullptr; }
	void Ispis() { 
		cout << "Datum izostanka: "; _datumIzostanka.Ispis();
		if (_opravdano)
			cout << "Razlog izostanka: " << _razlogIzostanka << endl;
		cout <<"Broj sati: "<<_brojSati << endl;
		cout << endl;
	}
	void Opravdaj(const char* razlogIzostanka) {
		if (_razlogIzostanka != nullptr)
			delete[] _razlogIzostanka;
		int vel = strlen(razlogIzostanka) + 1;
		_razlogIzostanka = new char[vel];
		strcpy_s(_razlogIzostanka, vel, razlogIzostanka);
		_opravdano = true;

	}
};
struct Student {
	//format broja indeksa: IB150051
	//osigurati automatsko generisanje broja indeksa pocevsi od IB150001
	char _brojIndeksa[9];
	char* _imePrezime;
	Izostanak *_izostanci;
	int _brojIzostanaka;

	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (int i = 0; i < _brojIzostanaka; i++)
			_izostanci[i].Dealociraj();
		delete[] _izostanci; _izostanci = nullptr;
	}
	void Unos(const char* brojIndeksa, const char* imePrezime) {
		_imePrezime = new char[strlen(imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(imePrezime) + 1, imePrezime);
		strcpy_s(_brojIndeksa, strlen(brojIndeksa) + 1, brojIndeksa);
		_izostanci = nullptr;
		_brojIzostanaka = 0;
	}
	void Ispis() {
		cout << "Ime i prezime: " << _imePrezime << endl;
		cout << "Broj indeksa: " << _brojIndeksa << endl;
		if (_izostanci != nullptr) {
			for (int i = 0; i < _brojIzostanaka; i++) {
				_izostanci[i].Ispis();
			}
		}
		else cout << "Student " << _imePrezime << " nema izostanaka." << endl;


		char nazivFajla[13];
		strcpy_s(nazivFajla, 13, _brojIndeksa);
		strcat_s(nazivFajla, 13, ".txt");
		ofstream fajl(nazivFajla);
		
		fajl << "Broj indeksa: " << _brojIndeksa << endl;
		fajl << "Broj izostanaka: " << _brojIzostanaka << endl;
		fajl << "Opravdani izostanci: " << crt;
		for (int i = 0; i < _brojIzostanaka; i++){
			if (_izostanci[i]._opravdano) {
				fajl << "Datum: " << *_izostanci[i]._datumIzostanka._dan << "/" << *_izostanci[i]._datumIzostanka._mjesec << "/" << *_izostanci[i]._datumIzostanka._godina << endl;
				fajl << "Broj sati: " << _izostanci[i]._brojSati << endl;
				fajl << "Razlog: " << _izostanci[i]._razlogIzostanka << endl;
				fajl << crt;
			}
		}

		fajl << "Neopravdani izostanci: " << crt;
		for (int i = 0; i < _brojIzostanaka; i++) {
			if (!_izostanci[i]._opravdano) {
				fajl << "Datum: " << *_izostanci[i]._datumIzostanka._dan << "/" << *_izostanci[i]._datumIzostanka._mjesec << "/" << *_izostanci[i]._datumIzostanka._godina << endl;
				fajl << "Broj sati: " << _izostanci[i]._brojSati << endl;
				fajl << crt;
			}
		}

		fajl.close();
	}
	bool DodajIzostanak(Izostanak izostanak) {
		for (int i = 0; i < _brojIzostanaka; i++) {
			if (_izostanci[i]._datumIzostanka.getDane() == izostanak._datumIzostanka.getDane()){
				_izostanci[i]._brojSati += izostanak._brojSati;
				return true;
			}
		}
		
		Izostanak* temp = new Izostanak[_brojIzostanaka + 1];
		for (int i = 0; i < _brojIzostanaka; i++){
			temp[i].Unos(_izostanci[i]._datumIzostanka, _izostanci[i]._brojSati);
			if (_izostanci[i]._opravdano)
				temp[i].Opravdaj(_izostanci[i]._razlogIzostanka);
		}

		temp[_brojIzostanaka].Unos(izostanak._datumIzostanka, izostanak._brojSati);
		if (izostanak._opravdano)
			temp[_brojIzostanaka].Opravdaj(izostanak._razlogIzostanka);
		_izostanci = temp;
		_brojIzostanaka++;
		return true;
	}
	//Potpisi funkcija trebaju odgovarati onima u main-u
	//1. Unos
	//2. Dealociraj
	/*3. DodajIzostanak - dodaje novi izostanak u listu izostanaka.	Onemoguciti ponavljanje izostanaka na nacin da se uvecava samo broj sati ukoliko*/
	//4. Ispis - ispisuje izostanke u formatu prikazanom na slici (nije obavezno da ispis bude identican, ali je svakako pozeljno). Prilikom svakog ispisa, 
	//izostanke je potrebno spasiti u tekstualni fajl sa istim nazivom kao i broj indeksa.
	//5. BinarnaPretraga - koristeci binarnu pretragu, na osnovu datuma, pronalazi i vraca pokazivac na izostanak. Ukoliko trazeni izostanak ne postoji funkcija vraca nullptr.
	Izostanak* BinarnaPretraga(Datum datum) {
		//sortiranje
		for (int i = 0; i < _brojIzostanaka; i++) {
			for (int j = i + 1; j < _brojIzostanaka; j++) {
				if (_izostanci[j]._datumIzostanka.getDane() < _izostanci[i]._datumIzostanka.getDane()){

					Izostanak* temp = new Izostanak;
					temp->Unos(_izostanci[i]._datumIzostanka, _izostanci[i]._brojSati);
					if(_izostanci[i]._opravdano)
						temp->Opravdaj(_izostanci[i]._razlogIzostanka); //i u temp
					_izostanci[i].Dealociraj();

					//j u i
					_izostanci[i].Unos(_izostanci[j]._datumIzostanka, _izostanci[j]._brojSati);
					if (_izostanci[j]._opravdano)
						_izostanci[i].Opravdaj(_izostanci[j]._razlogIzostanka);
					_izostanci[j].Dealociraj();
					
					//temp u j
					_izostanci[j].Unos(temp->_datumIzostanka, temp->_brojSati);
					if (temp->_opravdano)
						_izostanci[j].Opravdaj(temp->_razlogIzostanka);
					temp->Dealociraj();
				}
			}
		}
		int prvi = 0;
		int zadnji = _brojIzostanaka;
		while (prvi <= zadnji) {

			int srednji = (prvi + zadnji) / 2;
			
			if (_izostanci[srednji]._datumIzostanka.getDane() == datum.getDane())
				return &_izostanci[srednji];
			else if (_izostanci[srednji]._datumIzostanka.getDane() < datum.getDane())
				prvi = srednji + 1;
			else if (_izostanci[srednji]._datumIzostanka.getDane() > datum.getDane())
				zadnji = srednji - 1;
		}
		return nullptr;
	}
};
//1. PronadjiNajveciNeopravdaniIzostanak - rekurzivna funkcija koja vraca pokazivac na neopravdani izostanak koji ima najveci broj 
//2. GenerisiSljedeciBrojIndeksa - generise i vraca naredni broj indeksa


int pocetniIndex = 1;
char* GenerisiSljedeciBrojIndeksa() {
	char* indeks = new char[9];
	strcpy_s(indeks, 9, "IB150000");
	int brojac = 0;
	int kopija = pocetniIndex;
	do {
		kopija /= 10;
		brojac++;
	} while (kopija);
	_itoa_s(pocetniIndex, indeks + (8 - brojac), sizeof(indeks), 10);
	pocetniIndex++;
	return indeks;
}

Izostanak* PronadjiNajveciNeopravdaniIzostanak(Student *student, int brojac = 0, Izostanak *izostanak = nullptr) {
	if (brojac == student->_brojIzostanaka)
		return izostanak;
	if(izostanak == nullptr)
		return PronadjiNajveciNeopravdaniIzostanak(student, brojac + 1, &student->_izostanci[brojac]);
	if(student->_izostanci[brojac]._brojSati > izostanak->_brojSati && student->_izostanci[brojac]._opravdano == false)
		return PronadjiNajveciNeopravdaniIzostanak(student, brojac + 1, &student->_izostanci[brojac]);
	return PronadjiNajveciNeopravdaniIzostanak(student, brojac + 1, izostanak);
}

int main() {
	Datum jucer, prije5Dana, prije10Dana;
	jucer.Unos(12, 6, 2016);
	prije5Dana.Unos(8, 6, 2016);
	prije10Dana.Unos(3, 6, 2016);

	Student denis, amer;
	denis.Unos(GenerisiSljedeciBrojIndeksa(), "Denis Music");
	amer.Unos(GenerisiSljedeciBrojIndeksa(), "Amer Hasanbegovic");

	
	Izostanak izostanakJucer, izostanakPrije5Dana, izostanakPrije10Dana;

	izostanakJucer.Unos(jucer, 5);
	denis.DodajIzostanak(izostanakJucer);

	izostanakPrije5Dana.Unos(prije5Dana, 3);
	izostanakPrije5Dana.Opravdaj("Odsutan zbog bolesti - gripa");
	denis.DodajIzostanak(izostanakPrije5Dana);
	izostanakPrije5Dana.Unos(prije5Dana, 2);
	denis.DodajIzostanak(izostanakPrije5Dana);

	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);
	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);

	denis.Ispis();
	
	Izostanak* p = denis.BinarnaPretraga(jucer);
	if (p != nullptr){
		cout << "Binarnom pretragom pronadjen izostanak -> " << endl;
		p->Ispis();
	}
	
	Izostanak* p2 = PronadjiNajveciNeopravdaniIzostanak(&denis);
	if (p2 != nullptr) {
		cout << "Rekurzivno pronadjen najveci neopravdani izostanak -> " << endl;
		p2->Ispis();
		cout << endl;
	}

	//dealocirati zauzetu memoriju
	jucer.Dealociraj();
	prije5Dana.Dealociraj();
	prije10Dana.Dealociraj();
	izostanakJucer.Dealociraj();
	izostanakPrije5Dana.Dealociraj();
	izostanakPrije10Dana.Dealociraj();
	denis.Dealociraj();
	amer.Dealociraj();
	//system("pause");
	return 0;
}
