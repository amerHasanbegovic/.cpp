#include <iostream>
#include <cstring>
#include <memory>
using namespace std;

#pragma warning(disable:4996)

const char *crt = "\n-------------------------------------------\n";

enum eNacinStudiranja { REDOVAN, DL };
enum eRazred { PRVI = 1, DRUGI, TRECI, CETVRTI };
const char *chareNacinStudiranja[] = { "REDOVAN", "DL" };
const char *chareRazred[] = { "PRVI", "DRUGI", "TRECI", "CETVRTI" };


struct Datum {
	int _dan, _mjesec, _godina;
	void Unos(int d, int m, int g) { _dan = d; _mjesec = m; _godina = g; }
	void Ispis() { cout << _dan << "/" << _mjesec << "/" << _godina << endl; }
	int getDane() const { return _dan + _mjesec*30 + _godina*365; }
};

const Datum rokZaPrijavu = { 5, 7, 2017 };

const char * errVecDodan = "Istoimeni predmet se moze dodati najvise dva puta!";
const char * errProsaoRok = "Zao nam je. Rok za prijavu je vec prosao!";
const char * uspjesnoDodan = "Predmet uspjesno dodan!";

struct Predmet {
	char * _naziv;
	int * _ocjena;
	Datum _datumUnosa;
	void Unos(const char * naziv, int ocjena, Datum datumUnosa) {
		int vel = strlen(naziv) + 1;
		_naziv = new char[vel];
		strcpy(_naziv, naziv);
		_ocjena = new int(ocjena);
		_datumUnosa.Unos(datumUnosa._dan, datumUnosa._mjesec, datumUnosa._godina);
	}
	void Dealociraj() {
		delete[] _naziv; _naziv = nullptr;
		delete _ocjena; _ocjena = nullptr;
	}

	void Ispis() {
		cout << _naziv << " (" << *_ocjena << ") "; _datumUnosa.Ispis();
	}
	void PromijeniOcjenu(int ocjena) { *_ocjena = ocjena; }
};

struct Uspjeh {
	eRazred  _razred;
	bool _najboljiUcenik; // ako je kandidat u tom razredu proglasen najboljim ucenikom
	shared_ptr<Predmet> *_predmeti;
	int _brojPredmeta;
	void Unos(eRazred razred, bool najboljiUcenik) {
		_razred = razred;
		_najboljiUcenik = najboljiUcenik;
        _brojPredmeta = 0;
        _predmeti = nullptr;
	}
	void DodajPredmet(Predmet p){
        shared_ptr<Predmet> *temp = new shared_ptr<Predmet>[_brojPredmeta+1];
        for(int i=0; i<_brojPredmeta; i++){
            temp[i] = make_shared<Predmet>();
            temp[i]->Unos(_predmeti[i]->_naziv, *_predmeti[i]->_ocjena, _predmeti[i]->_datumUnosa);
            _predmeti[i]->Dealociraj();
        }
        if(_predmeti != nullptr) delete[] _predmeti;
        temp[_brojPredmeta] = make_shared<Predmet>();
        temp[_brojPredmeta]->Unos(p._naziv, *p._ocjena, p._datumUnosa);
        _predmeti = temp;
        _brojPredmeta++;
	}
	void Dealociraj() {
        for(int i=0; i<_brojPredmeta; i++){
            _predmeti[i]->Dealociraj();
        }
        delete[] _predmeti; _predmeti = nullptr;
	}
	void Ispis() {
		cout << crt << "Razred -> " << chareRazred[_razred] << " Najbolji -> " << _najboljiUcenik << crt;
		for (size_t i = 0; i < _brojPredmeta; i++)
            _predmeti[i]->Ispis();
	}
};

struct Kandidat {
	eNacinStudiranja _nacinStudiranja;
	char * _imePrezime;
	Uspjeh * _uspjeh[4];

	void Unos(eNacinStudiranja nacinStudiranja, const char * imePrezime) {
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy(_imePrezime, imePrezime);
		_nacinStudiranja = nacinStudiranja;
		for (size_t i = 0; i < 4; i++)
			_uspjeh[i] = nullptr;
	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < 4; i++){
			if(_uspjeh[i] != nullptr){
                _uspjeh[i]->Dealociraj();
                delete _uspjeh[i];
			}
		}
	}


    void NajboljiUcenik(){
        for(int i=0; i<4; i++)
            if(_uspjeh[i] != nullptr)
                _uspjeh[i]->_najboljiUcenik = false;

        float suma = 0;
        float najboljiProsjek = 0;
        Uspjeh *najboljiUcenik = nullptr;
        for(int i=0; i<4; i++){
            suma = 0;
            if(_uspjeh[i] != nullptr){
                for(int j=0; j<_uspjeh[i]->_brojPredmeta; j++)
                    suma += *_uspjeh[i]->_predmeti[j]->_ocjena;

                suma /= _uspjeh[i]->_brojPredmeta;
                if(suma > najboljiProsjek){
                    najboljiProsjek = suma;
                    najboljiUcenik = _uspjeh[i];
                }
            }
        }
        najboljiUcenik->_najboljiUcenik = true;
    }

    /*
    uspjeh (tokom srednjoskolskog obrazovanja) se dodaje za svaki predmet na nivou razreda. prilikom dodavanja onemoguciti:
	- istoimeni predmet se moze dodati samo dva puta, bez obzira sto se dodaje na razlicitim godinama,
	- dodavanje predmeta nakon dozvoljenog roka za prijavu (rokZaPrijavu).
	razredi (predmeti ili uspjeh) ne moraju biti dodavani sortiranim redoslijedom (npr. prvo se moze dodati uspjeh za II razred, pa onda za I razred i sl.).
	Funkcija vraca neku od predefinisanih poruka u zavisnosti od (ne)uspjesnost izvrsenja
	*/

	bool DodajPredmet(eRazred razred, Predmet predmet){
        if(predmet._datumUnosa.getDane() >= rokZaPrijavu.getDane())
            return false;

        int brojIstih = 0;
        for(int i=0; i<4; i++){
            if(_uspjeh[i] != nullptr){
                for(int j=0; j<_uspjeh[i]->_brojPredmeta; j++){
                        if(strcmp(_uspjeh[i]->_predmeti[j]->_naziv, predmet._naziv) == 0)
                            brojIstih++;
                }
            }
        }

        if(brojIstih >= 2) return false;

        if(_uspjeh[(int)razred -1] == nullptr){ //razred-1 zbog indeksiranja, enum pocinje od 1
            _uspjeh[(int)razred -1] = new Uspjeh;
            _uspjeh[(int)razred -1]->Unos(razred, false);
        }
        _uspjeh[(int)razred -1]->DodajPredmet(predmet);
        NajboljiUcenik();
        return true;
	}
	void Ispis() {
		cout << crt << _imePrezime << " " << chareNacinStudiranja[_nacinStudiranja];
		for (size_t i = 0; i < 4; i++)
			if(_uspjeh[i] != nullptr)
                _uspjeh[i]->Ispis();
	}
};

/*
    napisati rekurzivnu funkciju koja ce vratiti pokazivac na kandidata sa najvecim prosjekom u razredu koji je proslijedjen kao parametar.
    ukoliko je vise kandidata ostvarilo isti prosjek, funkcija treba da vrati posljednje pronadjenog kandidata.
    u slucaju da niti jedan kandidat nije evidentirao uspjeh u trazenom razredu, funkcija vraca nullptr. u nastavku je prikazan primjer poziva rekurzivne funkcije,
    a ostale parametre dodajte po potrebi.
    Kandidat * kandidatSaNajboljimProsjekom = rekNajboljiProsjek(prijave2017, brojKandidata, DRUGI);
*/
    Kandidat *rekNajboljiProsjek(Kandidat *kandidati, int brojKandidata, eRazred razred, Kandidat *najboljiKandidat = nullptr, float najboljiProsjek = 0){
        if(brojKandidata -1 <= 0) //-1 zbog indeksiranja
            return najboljiKandidat; //ako je preostali broj kandidata manji ili jednak nuli vrati najboljeg kandidata

        if(kandidati[brojKandidata - 1]._uspjeh[(int)razred - 1] == nullptr) //ako je neki od uspjeha kandidata == nullptr -> brojKandidata - 1
            rekNajboljiProsjek(kandidati, brojKandidata - 1, razred, najboljiKandidat, najboljiProsjek);

        float prosjek = 0;
        for(int i=0; i<kandidati[brojKandidata - 1]._uspjeh[(int)razred - 1]->_brojPredmeta; i++)
            prosjek += *kandidati[brojKandidata - 1]._uspjeh[(int)razred - 1]->_predmeti[i]->_ocjena;

        prosjek /= kandidati[brojKandidata - 1]._uspjeh[(int)razred - 1]->_brojPredmeta;

        if(najboljiKandidat == nullptr)
            return rekNajboljiProsjek(kandidati, brojKandidata - 1, razred, &kandidati[brojKandidata - 1], prosjek);

        if(prosjek > najboljiProsjek)
            return rekNajboljiProsjek(kandidati, brojKandidata - 1, razred, &kandidati[brojKandidata - 1], prosjek);

        return rekNajboljiProsjek(kandidati, brojKandidata - 1, razred, najboljiKandidat, najboljiProsjek);
    }

int main(){
	Datum datum19062017, datum20062017, datum30062017, datum05072017;
	datum19062017.Unos(19, 6, 2017);
	datum20062017.Unos(20, 6, 2017);
	datum30062017.Unos(30, 6, 2017);
	datum05072017.Unos(5, 7, 2017);

	Predmet Matematika, Fizika, Hemija, Engleski; //2 - ocjena na predmetu; datum - datum evidentiranja uspjeha na predmetu jer postoji krajnji rok za evidentiranje
	Matematika.Unos("Matematika", 2, datum19062017);
	Fizika.Unos("Fizika", 5, datum20062017);
	Hemija.Unos("Hemija", 2, datum20062017);
	Engleski.Unos("Engleski", 5, datum05072017);

	int brojKandidata = 2;

	Kandidat *prijave2017 = new Kandidat[brojKandidata];
	prijave2017[0].Unos(DL, "Jasmin Azemovic");
	prijave2017[1].Unos(REDOVAN, "Indira Hamulic");

	if (prijave2017[0].DodajPredmet(DRUGI, Engleski)) //ne bi trebao dodati jer je prosao postavljeni rok za dodavanje predmeta
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(DRUGI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(PRVI, Fizika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(PRVI, Hemija))
		cout << "Predmet uspjesno dodan!" << crt;

	Matematika.PromijeniOcjenu(5);
	Hemija.PromijeniOcjenu(3);

	if (prijave2017[1].DodajPredmet(PRVI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(DRUGI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(TRECI, Matematika)) //ne bi trebalo ponovo dodati Matematiku!
		cout << "Predmet Muspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(TRECI, Hemija))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(DRUGI, Engleski))
		cout << "Predmet uspjesno dodan!" << crt;

	/*
    koristeci Lambda izraz kreirati funkciju koja ce vratiti uspjeh kandidata koji je ostvario najveci prosjek (na nivou razreda, a ne ukupni prosjek).
    funkcija prima parametre tipa eNacinStudiranja (pretrazuje samo kandidate za Redovan ili DL nacin studiranja) i bool kojim se omogucava pretraga samo onih razreda
    na kojim su kandidati bili najbolji ucenici (ako se funkciji proslijedi vrijednost true, ona ce uzeti u obzir samo one razrede kada su kandidati oznaceni kao najbolji).
    ukoliko vise kandidata ima isti prosjek funkcija vraca uspjeh (najboljeg razreda) prvog pronadjenog kandidata
	*/
	auto najboljiUspjeh = [prijave2017, brojKandidata](eNacinStudiranja nacinStudiranja, bool najUcenik){
        float prosjek = 0;
        float najboljiProsjek = 0;
        Uspjeh *najbolji = nullptr;

        for(int i=0; i<brojKandidata; i++){
            if(prijave2017[i]._nacinStudiranja == nacinStudiranja){
                for(int j=0; j<4; j++){
                    if(prijave2017[i]._uspjeh[j] != nullptr && prijave2017[i]._uspjeh[j]->_najboljiUcenik == najUcenik){
                        for(int k=0; k<prijave2017[i]._uspjeh[j]->_brojPredmeta; k++){
                            prosjek += *prijave2017[i]._uspjeh[j]->_predmeti[k]->_ocjena;
                        }
                        prosjek /= prijave2017[i]._uspjeh[j]->_brojPredmeta;
                        if(prosjek > najboljiProsjek){
                            najboljiProsjek = prosjek;
                            najbolji = prijave2017[i]._uspjeh[j];
                        }
                    }
                }
            }
        }
        return najbolji;
	};

	Uspjeh * najbolji = najboljiUspjeh(DL,true);
	cout<<"Najbolji uspjeh (lambda): "<<endl;
	if(najbolji != nullptr)
        najbolji->Ispis();
    cout<<endl;

    Kandidat *kandidatSaNajboljimProsjekom = rekNajboljiProsjek(prijave2017, brojKandidata, DRUGI);
    cout<<"Kandidat s najboljim uspjehom (rekurzija): "<<endl;
    if(kandidatSaNajboljimProsjekom != nullptr)
        kandidatSaNajboljimProsjekom->Ispis();


    cout<<endl<<endl<<"Svi kandidati: "<<endl;
	for (size_t i = 0; i < brojKandidata; i++){
		prijave2017[i].Ispis();
		prijave2017[i].Dealociraj();
	}

	Matematika.Dealociraj();
	Fizika.Dealociraj();
	Hemija.Dealociraj();
	Engleski.Dealociraj();

//    if(najbolji != nullptr){
//        najbolji->Dealociraj();
//        delete najbolji; najbolji = nullptr;
//	}
//    if(kandidatSaNajboljimProsjekom != nullptr){
//        kandidatSaNajboljimProsjekom->Dealociraj();
//        delete kandidatSaNajboljimProsjekom; kandidatSaNajboljimProsjekom = nullptr;
//    }

	return 0;
}
