#include <iostream>
#include <fstream>
using namespace std;

//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)

enum Opstina { Opstina1, Opstina2, Opstina3, Opstina4 };
const char* OpstineChar[] = { "Opstina1", "Opstina2", "Opstina3", "Opstina4" };
enum Kandidati { Kandidat1, Kandidat2, Kandidat3, Kandidat4 };
const char* KandidatiChar[] = { "Kandidat1", "Kandidat2", "Kandidat3", "Kandidat4" };

struct Datum {
	int _dan, _mjesec, _godina;
	void Unos(int d, int m, int g) { _dan = d; _mjesec = m; _godina = g; }
	void Ispis() { cout << _dan << "/" << _mjesec << "/" << _godina << endl; }
	int getAge() { return _mjesec * 30 + _godina * 365; }
};

Datum datumIzbora;

struct Osoba {
	Datum _datumRodjenja;
	char* _imePrezime;
	char _JMBG[14];
	Opstina _prebivaliste;
	void Unos(Datum d, const char* ip, const char jmbg[], Opstina p) {
		_datumRodjenja.Unos(d._dan, d._mjesec, d._godina);
		_imePrezime = new char[strlen(ip) + 1];
		strcpy_s(_imePrezime, strlen(ip) + 1, ip);
		strcpy_s(_JMBG, 14, jmbg);
		_prebivaliste = p;
	}
	void Dealociraj() { delete[] _imePrezime; _imePrezime = nullptr; }
	void Info() {
		cout << "Ime i prezime: " << _imePrezime << " (" << _JMBG << ")" << endl;
		cout << "Mjesto prebivalista: " << OpstineChar[_prebivaliste] << endl;
		cout << "Datum rodjenja: ";  _datumRodjenja.Ispis();
	}
};
struct Glas {
	Osoba* _glasac;
	Kandidati* _glasZa;
	void Unos(Osoba o, Kandidati k) {
		_glasac = new Osoba;
		_glasac->Unos(o._datumRodjenja, o._imePrezime, o._JMBG, o._prebivaliste);
		_glasZa = new Kandidati(k);
	}
	void Ispis() {
		_glasac->Info();
		cout << "Glasao za: ";
		cout << KandidatiChar[*_glasZa] << endl << endl;
	}
	void Dealociraj() { 
		_glasac->Dealociraj(); 
		delete[] _glasac; _glasac = nullptr;
		delete[] _glasZa; _glasZa = nullptr;
	}
};
struct Izbori2016 {
	Opstina* _glasackoMjesto;
	Glas* _glasovi[1000];
	int _doSadaGlasalo;

	void Unos(Opstina opstina) {
		_glasackoMjesto = new Opstina(opstina);
		for (int i = 0; i < 1000; i++)
			_glasovi[i] = nullptr;
		_doSadaGlasalo = 0;
	}
	bool DodajGlas(Glas glas) {
		if ((datumIzbora.getAge() - glas._glasac->_datumRodjenja.getAge()) < 18*365)
			return false;

		if (glas._glasac->_prebivaliste != *_glasackoMjesto)
			return false;

		for (int i = 0; i < _doSadaGlasalo; i++) {
			for (int j = 0; j < _doSadaGlasalo; j++) {
				if (strcmp(_glasovi[i]->_glasac[j]._JMBG, glas._glasac->_JMBG) == 0)
					return false;
			}
		}

		_glasovi[_doSadaGlasalo] = new Glas;
		_glasovi[_doSadaGlasalo]->Unos(*glas._glasac, *glas._glasZa);
		_doSadaGlasalo++;
		return true;
	}
	void Dealociraj() {
		delete[] _glasackoMjesto; _glasackoMjesto = nullptr;
		for (int i = 0; i < _doSadaGlasalo; i++){
			_glasovi[i]->Dealociraj();
			delete[] _glasovi[i]; _glasovi[i] = nullptr;
		}
	}

	Opstina Ispis() {

		struct tempKandidati {
			Kandidati _kandidat;
			int _brojGlasova;
			
			void Unos(Kandidati k) {
				_kandidat = k;
				_brojGlasova = 0;
			}
		};

		tempKandidati kandidati[4];
		for (int i = 0; i < 4; i++)
			kandidati[i].Unos((Kandidati)i);

		int ukupno = 0;
		for (int i = 0; i < _doSadaGlasalo; i++) {
			for (int j = 0; j < 4; j++) {
				if(*_glasovi[i]->_glasZa == kandidati[j]._kandidat){
					kandidati[j]._brojGlasova++;
					ukupno++;
				}
			}
		}
		
		for (int i = 0; i < 4; i++) {
			for (int j = i + 1; j < 4; j++) {
				if (kandidati[j]._brojGlasova > kandidati[i]._brojGlasova) {
					tempKandidati temp;
					temp = kandidati[i];
					kandidati[i] = kandidati[j];
					kandidati[j] = temp;
				}
			}
		}
		for (int i = 0; i < 4; i++)
			cout << KandidatiChar[kandidati[i]._kandidat] << " - " << ((float)kandidati[i]._brojGlasova / ukupno) * 100 << "%" << endl;
		return *_glasackoMjesto;
	}

	int BrojGlasacaPoRodjenju(Datum OD, Datum DO) {
		int brojac = 0;
		for (int i = 0; i < _doSadaGlasalo; i++){
			if (_glasovi[i]->_glasac->_datumRodjenja.getAge() <= OD.getAge() && _glasovi[i]->_glasac->_datumRodjenja.getAge() >= DO.getAge())
				brojac++;
		}
		return brojac;
	}
	/*
	1. Unos - na osnovu vrijednosti primljenih parametara, inicijalizovati vrijednosti atributa strukture.
	2. DodajGlas - funkcija treba da omoguci dodavanje informacija o novom glasu i tom prilikom onemoguciti: da ista osoba glasa vise puta, 
	glasanje osobama mladjim od 18 godina (uzeti u obzir samo mjesec i godinu rodjenja), glasanje osobama iz drugih opstina. U zavisnosti od uspjesnosti operacije funkcija vraca true ili false
	3. Ispis - u zavisnosti od postignutog uspjeha funkcija treba ispisati listu kandidata sortiranu opadajucim redoslijedom, a uz svakog kandidata je potrebno ispisati i osvojeni procenat glasova.
	Funkcija vraca opstinu u kojoj je pobjednicki kandidat ostvario najveci broj glasova, a ukoliko je pobjednicki kandidat ostvario podjednak broj glasova u vise opstina, 
	funkcija vraca prvu koja se nalazi u nizu na koji pokazuje pokazivac izbornaMjesta
	4. BrojGlasacaPoRodjenju - funkcija vraca broj glasaca koji su do tog momenta glasali, a koji su rodjeni u parametrima definisanom periodu (parametri su tipa datum, period OD i DO)
	*/
};
/*
1. UpisiUBinarniFajl - objekat koji je primljen kao parametar upisuje u binarni fajl. Naziv fajla treba biti identican nazivu opstine u kojoj se odrzavaju izbori
2. UcitajIzBinarnogFajla - u objekat koji je primljen kao parametar ucitava sadrzaj binarnog fajla (naziv fajla je takodjer proslijedjen kao parametar)
3. PretragaRekurzivno - rekurzivna funkcija koja treba da vrati broj glasova koje je na izborima ostvario odredjeni kandidat (kandidat se proslijedjuje kao parametar)
*/

int PretragaRekurzivno(Kandidati kandidat, Izbori2016 izbori, int brojGlasova = 0, int brojac = 0) {
	if (brojac == izbori._doSadaGlasalo)
		return brojGlasova;

	if (*izbori._glasovi[brojac]->_glasZa == kandidat)
		PretragaRekurzivno(kandidat, izbori, brojGlasova++, brojac + 1);
	return PretragaRekurzivno(kandidat, izbori, brojGlasova, brojac + 1);
}

void UpisiUBinarniFajl(Izbori2016& izbori) {
	char nazivFajla[100];
	strncpy_s(nazivFajla, 100, OpstineChar[*izbori._glasackoMjesto], _TRUNCATE);
	strncat_s(nazivFajla, 100, ".bin", _TRUNCATE);

	ofstream upisUFajl(nazivFajla, ios::binary);
	if (upisUFajl.good())
		upisUFajl.write((char*)& izbori, sizeof(Izbori2016));
	upisUFajl.close();
}

void UcitajIzBinarnogFajla(Izbori2016& izbori, const char* naziv) {
	char nazivFajla[100];
	strncpy_s(nazivFajla, 100, naziv, _TRUNCATE);
	strncat_s(nazivFajla, 100, ".bin", _TRUNCATE);

	ifstream ucitavanjaIzFajla(nazivFajla, ios::binary);
	if (ucitavanjaIzFajla.good())
		ucitavanjaIzFajla.read((char*)& izbori, sizeof(Izbori2016));
	ucitavanjaIzFajla.close();
}

int main() {
	Datum datumGlasac1, datumGlasac2, datumGlasac3, datumGlasac4;

	datumIzbora.Unos(14, 7, 2016);
	datumGlasac1.Unos(18, 5, 1995);
	datumGlasac2.Unos(5, 3, 1982);
	datumGlasac3.Unos(12, 8, 1958);
	datumGlasac4.Unos(22, 6, 2000);

	Osoba a, b, c, d, e;
	a.Unos(datumGlasac1, "Denis Music", "1111111111111", Opstina1);
	b.Unos(datumGlasac2, "Jasmin Azemovic", "1111111111112", Opstina1);
	c.Unos(datumGlasac3, "Indira Hamulic", "1111111111113", Opstina1);
	d.Unos(datumGlasac4, "Adel Handzic", "1111111111114", Opstina2);
	e.Unos(datumGlasac4, "Zanin Vejzovic", "1111111111115", Opstina1);

	Glas g1, g2, g3, g4, g5;
	g1.Unos(a, Kandidat1);
	g2.Unos(b, Kandidat1);
	g3.Unos(c, Kandidat2);
	g4.Unos(d, Kandidat1);
	g5.Unos(e, Kandidat2);

	Izbori2016 izbori, izbori_FromFile;
	izbori.Unos(Opstina1);

	izbori.DodajGlas(g1);
	izbori.DodajGlas(g2);
	izbori.DodajGlas(g3);
	izbori.DodajGlas(g4);
	izbori.DodajGlas(g5);
	izbori.Ispis();

	cout << endl << endl;

	Datum OD, DO;
	OD.Unos(17, 7, 1998);
	DO.Unos(17, 7, 1986);
	cout << "Glasaca u starost od 18 - 30 godina-> " << izbori.BrojGlasacaPoRodjenju(OD, DO) << endl;
	
	cout << "Broj glasova za Kandidat1->" << PretragaRekurzivno(Kandidat1, izbori) << endl << endl << endl;
	
	UpisiUBinarniFajl(izbori);
	UcitajIzBinarnogFajla(izbori_FromFile, "Opstina1");
	izbori_FromFile.Ispis();

	a.Dealociraj(); b.Dealociraj(); c.Dealociraj(); d.Dealociraj(); e.Dealociraj();
	g1.Dealociraj(); g2.Dealociraj(); g3.Dealociraj(); g4.Dealociraj(); g5.Dealociraj();
	izbori.Dealociraj();
	return 0;
}
