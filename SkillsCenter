#include <iostream>
#include <cstring>
using namespace std;
//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)

enum enumKursevi { HtmlCSSJavaScript, SoftwareEngeneeringFundamentals, MasteringSQL, WindowsSecurity };
const char *charKursevi[] = { "Html&CSS&JavaScript", "Software Engineering Fundamentals", "Mastering SQL", "Windows Security" };
const char *crt = "\n--------------------------------------------\n";

struct Datum {
	int *_dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina; }
	void Dealociraj() { delete _dan; delete _mjesec; delete _godina; }
	int getDane() { return *_dan + *_mjesec*30 + *_godina*365; }
};

struct Kurs {
	enumKursevi _kurs;
	Datum *_pocetak, *_kraj;
	char *_imePredavaca;
	float _cijenaKursa;

	void Unos(enumKursevi kurs, Datum pocetak, Datum kraj, const char *imePredavaca, float cijenaKursa) {
		_kurs = kurs;
		_pocetak = new Datum;
		_pocetak->Unos(*pocetak._dan, *pocetak._mjesec, *pocetak._godina);
		_kraj = new Datum;
		_kraj->Unos(*kraj._dan, *kraj._mjesec, *kraj._godina);
		_imePredavaca = new char[strlen(imePredavaca)+1];
		strcpy(_imePredavaca, imePredavaca);
		_cijenaKursa = cijenaKursa;
	}
	void Ispis() {
		cout << charKursevi[_kurs] << " " << _imePredavaca << " " << _cijenaKursa << " (";
		_pocetak->Ispis(); cout << " - "; _kraj->Ispis(); cout << ")";
	}
	void Dealociraj() {
		delete[] _imePredavaca; _imePredavaca = nullptr;
		_pocetak->Dealociraj();
		_kraj->Dealociraj();
		delete _pocetak; _pocetak = nullptr;
		delete _kraj; _kraj = nullptr;
	}
};
struct Polaznik {
	char * _imePrezime;
	Datum * _datumRodjenja;
	void Unos(const char *imePrezime, Datum datumRodjenja) {
		_imePrezime = new char[strlen(imePrezime) + 1];
		strcpy(_imePrezime, imePrezime);
		_datumRodjenja = new Datum;
		_datumRodjenja->Unos(*datumRodjenja._dan, *datumRodjenja._mjesec, *datumRodjenja._godina);
	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		_datumRodjenja->Dealociraj();
		delete _datumRodjenja; _datumRodjenja = nullptr;
	}
	void Ispis() { cout << _imePrezime << " ("; _datumRodjenja->Ispis(); cout << ") "<<endl; }
};
struct Prijava {
	Polaznik * _polaznik; //prijava moze biti pojedinacna ili grupna
	float * _uplaceniIznos;
	/*za svakog polaznika ce se cuvati podatak o iznosu uplate. uplaceni iznos svakog pojedinog polaznika treba biti jednak punoj cijeni kursa osim u sljedecim slucajevima:
	1. prijave 2 ili 3 polaznika dobijaju 10% popusta na ukupnu cijenu kursa
	2. prijave za vise od 3 polaznika dobijaju 15% na ukupnu cijenu kursa */
	int _trenutnoPolaznika;
	Kurs * _kurs; //prijava treba cuvati adresu (pokazivati) na postojeci kurs, a ne kreirati novi

	void Unos(Kurs *kurs){
	    _polaznik = nullptr;
	    _kurs = kurs;
	    _trenutnoPolaznika = 0;
	    _uplaceniIznos = nullptr;
	}

    bool DodajPolaznika(Polaznik polaznik, float uplata){

        for(int i=0; i<_trenutnoPolaznika; i++)
            if(strcmp(_polaznik[i]._imePrezime, polaznik._imePrezime) == 0)
                return false;

        float tempCijenaKursa = _kurs->_cijenaKursa;
        if(_trenutnoPolaznika >= 2 && _trenutnoPolaznika <=3)
            tempCijenaKursa -= tempCijenaKursa*0.1;
        if(_trenutnoPolaznika > 3)
            tempCijenaKursa -= tempCijenaKursa*0.15;

        if(uplata < tempCijenaKursa/2)
            return false;

        Polaznik *temp = new Polaznik[_trenutnoPolaznika+1];
        float *tempUplate = new float[_trenutnoPolaznika+1];
        for(int i=0; i<_trenutnoPolaznika; i++){
            temp[i].Unos(_polaznik[i]._imePrezime, *_polaznik[i]._datumRodjenja);
            tempUplate[i] = _uplaceniIznos[i];
            _polaznik[i].Dealociraj();
        }

        temp[_trenutnoPolaznika].Unos(polaznik._imePrezime, *polaznik._datumRodjenja);
        tempUplate[_trenutnoPolaznika] = uplata;
        _polaznik = temp;
        _uplaceniIznos = tempUplate;
        _trenutnoPolaznika++;

        return true;
    }

    bool DodajUplatu(Polaznik polaznik, float uplata){
        for(int i=0; i<_trenutnoPolaznika; i++){
            if(strcmp(_polaznik[i]._imePrezime, polaznik._imePrezime) == 0){
                _uplaceniIznos[i] += uplata;
                return true;
            }
        }
        return false;
    }

    float StatusUplate(Polaznik polaznik){
        float tempCijenaKursa = _kurs->_cijenaKursa;
        if(_trenutnoPolaznika >= 2 && _trenutnoPolaznika <= 3)
            tempCijenaKursa -= tempCijenaKursa*0.1;
        else if(_trenutnoPolaznika > 3)
            tempCijenaKursa -= tempCijenaKursa*0.15;

        for(int i=0; i<_trenutnoPolaznika; i++){
            if(strcmp(_polaznik[i]._imePrezime, polaznik._imePrezime) == 0){
                if(_uplaceniIznos[i] < tempCijenaKursa)
                    return (tempCijenaKursa - _uplaceniIznos[i])*-1;
                else return (tempCijenaKursa - _uplaceniIznos[i]) * -1;
            }
        }
        return 0;
    }

    void Ispis(){
        cout<<"Kurs: "; _kurs->Ispis();
        cout<<endl;
        for(int i=0; i<_trenutnoPolaznika; i++){
            cout<<"Polaznik: ";
            _polaznik[i].Ispis();
            cout<<"Uplaceni iznos: "<<_uplaceniIznos[i];
            cout<<crt;
        }
        cout<<crt;
    }
    void Kopiraj(Prijava &p) {
		_kurs = p._kurs;
		_polaznik = new Polaznik[p._trenutnoPolaznika];
		_uplaceniIznos = new float[p._trenutnoPolaznika];
		for (size_t i = 0; i < p._trenutnoPolaznika; i++)
		{
			_polaznik[i].Unos(p._polaznik[i]._imePrezime, *p._polaznik[i]._datumRodjenja);
			_uplaceniIznos[i] = p._uplaceniIznos[i];
		}
		_trenutnoPolaznika = p._trenutnoPolaznika;
	}
    void Dealociraj(){
        for(int i=0; i<_trenutnoPolaznika; i++){
           _polaznik[i].Dealociraj();
        }
        delete[] _polaznik; _polaznik = nullptr;
        delete[] _uplaceniIznos; _uplaceniIznos = nullptr;
    }
};

struct SkillsCentar {
	char * _nazivCentra;
	Kurs * _kursevi[50]; //JEDAN EDUKACIJSKI CENTAR MOZE NUDITI NAJVISE 50 KURSEVA
	int _trenutnoKurseva;
	Prijava * _prijave;
	int _trenutnoPrijava;

	void Unos(const char *nazivCentra){
        _nazivCentra = new char[strlen(nazivCentra) + 1];
        strcpy(_nazivCentra, nazivCentra);
        for(int i=0; i<50; i++)
            _kursevi[i] = nullptr;
        _trenutnoKurseva = 0;
        _prijave = nullptr;
        _trenutnoPrijava = 0;
	}
	void Ispis(){
        cout<<_nazivCentra<<endl;
        cout<<"Kursevi: "<<endl;
        for(int i=0; i<_trenutnoKurseva; i++){
            _kursevi[i]->Ispis();
            cout<<endl;
        }
        for(int i=0; i<_trenutnoPrijava; i++){
            _prijave[i].Ispis();
            cout<<endl;
        }
	}
	void Dealociraj(){
        delete[] _nazivCentra; _nazivCentra = nullptr;
        for(int i=0; i<_trenutnoKurseva; i++){
            _kursevi[i]->Dealociraj();
            delete[] _kursevi[i];
            _kursevi[i] = nullptr;
        }
        for(int i=0; i<_trenutnoPrijava; i++)
            _prijave[i].Dealociraj();
        delete[] _prijave; _prijave = nullptr;
	}
	bool DodajKurs(Kurs kurs){
	    for(int i=0; i<_trenutnoKurseva; i++)
        if(_kursevi[i]->_kurs == kurs._kurs && kurs._pocetak->getDane() - _kursevi[i]->_kraj->getDane() <= 15)
            return false;

        _kursevi[_trenutnoKurseva] = new Kurs;
        _kursevi[_trenutnoKurseva]->Unos(kurs._kurs, *kurs._pocetak, *kurs._kraj, kurs._imePredavaca, kurs._cijenaKursa);
        _trenutnoKurseva++;
	}

    bool DodajPrijavu(Prijava prijava){

        bool kursPostoji = false;
        for(int i=0; i<_trenutnoKurseva; i++)
            if(_kursevi[i]->_kurs == prijava._kurs->_kurs)
                kursPostoji = true;

        if(kursPostoji == true)
            return false;

        float tempCijenaKursa = prijava._kurs->_cijenaKursa;
        if(prijava._trenutnoPolaznika >= 2 && prijava._trenutnoPolaznika <= 3)
            tempCijenaKursa -= tempCijenaKursa*0.1;
        else if(prijava._trenutnoPolaznika > 3)
            tempCijenaKursa -= tempCijenaKursa*0.15;
        tempCijenaKursa = (prijava._trenutnoPolaznika * tempCijenaKursa)*0.8;

        float ukupnaUplataPolaznika = 0;
        for(int i=0; i<prijava._trenutnoPolaznika; i++)
            ukupnaUplataPolaznika += prijava._uplaceniIznos[i];

        if(ukupnaUplataPolaznika < tempCijenaKursa)
            return false;

        Prijava *temp = new Prijava[_trenutnoPrijava+1];
        for(int i=0; i<_trenutnoPrijava; i++){
            temp[i].Kopiraj(_prijave[i]);
            _prijave[i].Dealociraj();
        }
        temp[_trenutnoPrijava].Kopiraj(prijava);
        delete[] _prijave; _prijave = nullptr;

        _prijave = temp;
        _trenutnoPrijava++;
        return true;
    }

    Polaznik *PolazniciDugovanja(int &brojPolaznika){
        brojPolaznika = 0;
        for(int i=0; i<_trenutnoPrijava; i++){ //prebrojavanje polaznika

            float tempCijenaKursa = _prijave[i]._kurs->_cijenaKursa;
            if(_prijave[i]._trenutnoPolaznika >= 2 && _prijave[i]._trenutnoPolaznika <= 3)
                tempCijenaKursa -= tempCijenaKursa*0.1;
            else if(_prijave[i]._trenutnoPolaznika > 3)
                tempCijenaKursa -= tempCijenaKursa*0.15;

            for(int j=0; j<_prijave[i]._trenutnoPolaznika; j++)
                if(_prijave[i]._uplaceniIznos[j] < tempCijenaKursa)
                    brojPolaznika++;
        }

        Polaznik *polaznici = new Polaznik[brojPolaznika];
        brojPolaznika = 0;

        for(int i=0; i<_trenutnoPrijava; i++){

            float tempCijenaKursa = _prijave[i]._kurs->_cijenaKursa;
            if(_prijave[i]._trenutnoPolaznika >= 2 && _prijave[i]._trenutnoPolaznika <= 3)
                tempCijenaKursa -= tempCijenaKursa*0.1;
            else if(_prijave[i]._trenutnoPolaznika > 3)
                tempCijenaKursa -= tempCijenaKursa*0.15;

            //kopiranje polaznika u novi niz
            for(int j=0; j<_prijave[i]._trenutnoPolaznika; j++)
                if(_prijave[i]._uplaceniIznos[j] < tempCijenaKursa){
                    polaznici[brojPolaznika].Unos(_prijave[i]._polaznik[j]._imePrezime, *_prijave[i]._polaznik[j]._datumRodjenja);
                    brojPolaznika++;
                }
        }
        if(brojPolaznika == 0)
            return nullptr;
        return polaznici;
    }
};

float PretragaRekurzivno(SkillsCentar centar, int brojPrijava = 0, float dug = 0){
    if(centar._trenutnoPrijava == brojPrijava)
        return dug;

    float najveciDug = 0;
    for(int i=0; i<centar._prijave[brojPrijava]._trenutnoPolaznika; i++){
        float trenutniDug = centar._prijave[brojPrijava]._kurs->_cijenaKursa - centar._prijave[brojPrijava]._uplaceniIznos[i];
        if(najveciDug < trenutniDug)
            najveciDug = trenutniDug;
    }
    if(najveciDug > dug)
        return PretragaRekurzivno(centar, brojPrijava+1, najveciDug);
    return PretragaRekurzivno(centar, brojPrijava+1, dug);
}
int main() {

	Datum datum1, datum2, datum3, datum4, datum5, datum6, rodjendan;
	datum1.Unos(26, 11, 2015);
	datum2.Unos(29, 5, 2016);
	datum3.Unos(5, 6, 2016);
	datum4.Unos(15, 8, 2016);
	datum5.Unos(13, 7, 2016);
	datum6.Unos(22, 9, 2016);
	rodjendan.Unos(15, 6, 1995);

	Kurs softverski, html, sql, security;
	softverski.Unos(SoftwareEngeneeringFundamentals, datum1, datum2, "Emina Junuz", 1800);
	html.Unos(HtmlCSSJavaScript, datum2, datum3, "Larisa Tipura", 1000);
	sql.Unos(MasteringSQL, datum3, datum4, "Jasmin Azemovic", 2230);
	security.Unos(WindowsSecurity, datum3, datum4, "Adel Handzic", 4000);

	Polaznik denis, zanin, indira, dubravka;
	denis.Unos("Denis Music", rodjendan);
	zanin.Unos("Zanin Vejzovic", rodjendan);
	indira.Unos("Indira Hamulic", rodjendan);
	dubravka.Unos("Dubravka Plosko", rodjendan);

	Prijava denisZaninDubravkaHtml, zaninIndiraHtml, indiraSql;
	denisZaninDubravkaHtml.Unos(&html);
	//700 predstavlja uplatu polaznika koji se prijavljuje na kurs
    //tokom prijave polaznika nije potrebno uplatiti kompletan iznos, ali on mora biti veci od 50% iznosa kojeg je u tom momentu potrebno platiti
    //(u zavisnosti od broja prijavljenih tj. ostvarenog popusta)
	if (denisZaninDubravkaHtml.DodajPolaznika(denis, 700))
		cout << "Polaznik denis uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(zanin, 650))
		cout << "Polaznik zanin1 uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(zanin, 650))//onemoguciti dupliranje polaznika na istoj prijavi
		cout << "Polaznik zanin uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(dubravka, 430))//uplata ne zadovoljava kriterije
		cout << "Polaznik dubravka uspjesno dodan!" << endl;

	if (denisZaninDubravkaHtml.DodajUplatu(zanin, 200))//polaznik mora biti prethodno dodan prijavi da bi mogao dodati novu uplatu
		cout << "Uplata zanin 200 uspjesno dodana" << endl;

    zaninIndiraHtml.Unos(&html);
	if (zaninIndiraHtml.DodajPolaznika(zanin, 800))
		cout << "Polaznik zanin uspjesno dodan!" << endl;
	if (zaninIndiraHtml.DodajPolaznika(indira, 750))
		cout << "Polaznik indira uspjesno dodan!" << endl;

	float stanjeUplate = denisZaninDubravkaHtml.StatusUplate(zanin);//ako polaznik duguje novca funkcija vraca negativan iznos potrebne uplate
	cout << "Polaznik "; zanin.Ispis();
	if (stanjeUplate > 0)
		cout << " je u pretplati " << stanjeUplate << " KM" << endl;
	else if(stanjeUplate < 0)
		cout << " je duzan uplatiti " << stanjeUplate * -1 << " KM" << endl;
    else if(stanjeUplate == 0)
        cout<<" nema dugova niti pretplate." << endl;

	SkillsCentar mostar;
	mostar.Unos("Skills Center Mostar");

	//jedan edukacijski centar moze moze nuditi vise istih kurseva (npr. MasteringSQL), ali novi kurs moze poceti tek 15 dana nakon zavrsetka prethodnog kursa npr.
	//ako prethodni kurs MasteringSQL traje 01.03.2016 - 01.04.2016, onda se novi kurs MasteringSQL moze poceti nakon 15.04.2016
	if (mostar.DodajKurs(softverski)) {
		cout << crt << "KURS USPJESNO REGISTROVAN" << crt;
		softverski.Ispis();
		cout << crt;
	}
	//nije moguce dodati prijavu onog kursa koji nije evidentiran (registrovan, ponudjen) u tom edukacijskom centru
	//moguce je dodati samo one prijave koje kod kojih ukupna uplata iznosi vise od 80% cijene kursa (za prijavljeni broj polaznika)
	if (mostar.DodajPrijavu(denisZaninDubravkaHtml)) {
		cout << crt << "PRIJAVA EVIDENTIRANA" << crt;
		denisZaninDubravkaHtml.Ispis();
	}
	if (mostar.DodajPrijavu(zaninIndiraHtml)) {
		cout << crt << "PRIJAVA EVIDENTIRANA" << crt;
		zaninIndiraHtml.Ispis();
	}

	int brojPolaznika = 0;
	//vraca niz polaznika koji nisu izmirili uplate
	Polaznik * polazniciDugovanja = mostar.PolazniciDugovanja(brojPolaznika);

	cout << "Pronadjeno " << brojPolaznika << " polaznika koji nisu kompletirali svoje uplate --->>> "<<endl;
	for (size_t i = 0; i < brojPolaznika; i++)
		polazniciDugovanja[i].Ispis();

	//PretragaRekurzivno - rekurzivna funkcija pronalazi najveci iznos duga ostvarenog u odredjenom edukacijskom centru
	cout<< endl <<"Pretraga rekurzivno -->";
	cout << " Najveci dug iznosi " << PretragaRekurzivno(mostar) << endl<<endl<<endl<<endl;


	//ispisuje sve informacije o edukacijskom centru. prije ispisa sortirati sve prijave po visini dugovanja njenih polaznika
	mostar.Ispis();



	datum1.Dealociraj(); datum2.Dealociraj(); datum3.Dealociraj(); datum4.Dealociraj(); datum5.Dealociraj(); datum6.Dealociraj(); rodjendan.Dealociraj();
    softverski.Dealociraj(); html.Dealociraj(); sql.Dealociraj(); security.Dealociraj();
    denis.Dealociraj(); zanin.Dealociraj(); indira.Dealociraj(); dubravka.Dealociraj();
    denisZaninDubravkaHtml.Dealociraj(); zaninIndiraHtml.Dealociraj(); indiraSql.Dealociraj();
    if(brojPolaznika > 0){
        for(int i=0; i<brojPolaznika; i++)
            polazniciDugovanja[i].Dealociraj();
        delete[] polazniciDugovanja; polazniciDugovanja = nullptr;
    }
    mostar.Dealociraj();

	return 0;
}
