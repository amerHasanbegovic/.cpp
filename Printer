#include<iostream>
#include<cstring>
#include<memory>
using namespace std;

//narednu liniju code-a ignorisite, osim u slucaju da vam bude predstavljala smetnje u radu
#pragma warning(disable:4996)

const char *crt = "\n-------------------------------------------\n";

enum vrstaDokumenta { PDF, DOC, TXT, HTML };
const char * vrstaDokumentaChar[] = { "PDF", "DOC", "TXT", "HTML" };

enum Prioritet { VISOK, SREDNJI, NIZAK };
const char * PrioritetChar[] = { "VISOK", "SREDNJI", "NIZAK" };

char * AlocirajNizKaraktera(const char * sadrzaj){
    int vel = strlen(sadrzaj) + 1;
    char * temp = new char[vel];
    strcpy(temp, sadrzaj);
    return temp;
}

const int BROJ_ZNAKOVA_PO_STRANICI = 30;

struct DatumVrijeme{
    int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
    void Unos(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 1, int minuti = 1){
        _dan = new int(dan);
        _mjesec = new int(mjesec);
        _godina = new int(godina);
        _sati = new int(sati);
        _minuti = new int(minuti);
    }

    void Dealociraj(){
        delete _dan;
        _dan = nullptr;
        delete _mjesec;
        _mjesec = nullptr;
        delete _godina;
        _godina = nullptr;
        delete _sati;
        _sati = nullptr;
        delete _minuti;
        _minuti = nullptr;
    }

    void Ispis(){
        cout << *_dan << "." << *_mjesec << "." << *_godina << " " << *_sati << ":" << *_minuti << endl;
    }
    int getDane(){ return *_dan + *_mjesec*30 + *_godina*365; }
};

struct Filter{
    char * _sadrzaj;
    Prioritet _prioritet;
    void Unos(const char * sadrzaj, Prioritet prioritet){
        _sadrzaj = AlocirajNizKaraktera(sadrzaj);
        _prioritet = prioritet;
    }

    void Dealociraj(){
        delete[] _sadrzaj;
        _sadrzaj = nullptr;
    }

    void Ispis(){
        cout << _sadrzaj << " (" << PrioritetChar[_prioritet] << ")" << endl;
    }
};

struct Dokument{
    vrstaDokumenta _vrsta;
    char * _naziv;
    char * _sadrzaj;
    unique_ptr<DatumVrijeme> _kreiran;
    int _brojStranica;

    void Unos(vrstaDokumenta vrsta, const char *naziv, DatumVrijeme kreiran){
        _naziv = AlocirajNizKaraktera(naziv);
        _vrsta = vrsta;
        _kreiran = make_unique<DatumVrijeme>();
        _kreiran->Unos(*kreiran._dan, *kreiran._mjesec, *kreiran._godina, *kreiran._sati, *kreiran._minuti);
        _brojStranica = 0; //broj stranica se odredjuje prilikom svakog dodavanja novog sadrzaja dokumentu
        _sadrzaj = nullptr;
    }
    void Dealociraj(){
        delete[] _naziv;
        _naziv = nullptr;
        delete[] _sadrzaj;
        _sadrzaj = nullptr;
        _kreiran->Dealociraj();
        //_kreiran.reset();
    }

    void Ispis(){
        cout << crt << _naziv << " " << vrstaDokumentaChar[_vrsta] << " kreiran ";
        _kreiran->Ispis();
        cout << crt << _sadrzaj << crt << " br.stranica (" << _brojStranica << ")" << crt;
    }

    void DodajSadrzaj(const char *sadrzaj){
        int brojac = 0;
        if(_sadrzaj == nullptr){
            _sadrzaj = new char[strlen(sadrzaj)+1];
            strcpy(_sadrzaj, sadrzaj);
            for(int i=0; i<strlen(_sadrzaj); i++)
                if(_sadrzaj[i])
                    brojac++;
            _brojStranica = brojac / BROJ_ZNAKOVA_PO_STRANICI;
        }
        else if(_sadrzaj != nullptr){
            brojac = 0;
            char *temp = new char[strlen(_sadrzaj) + strlen(sadrzaj) + 1];
            strcpy(temp, _sadrzaj);
            strcat(temp, sadrzaj);
            delete[] _sadrzaj;
            _sadrzaj = nullptr;
            _sadrzaj = temp;
            for(int i=0; i<strlen(_sadrzaj); i++)
                if(_sadrzaj[i])
                    brojac++;
            _brojStranica = brojac / BROJ_ZNAKOVA_PO_STRANICI;
        }
    }
};
struct Printer{
    char * _model;
    Dokument * _dokumenti;
    int _trenutnoDokumenata;
    Filter * _filteri;
    int _trenutnoFiltera;

    void Unos(const char *model){
        _model = AlocirajNizKaraktera(model);
        _filteri = nullptr;
        _dokumenti = nullptr;
        _trenutnoDokumenata = 0;
        _trenutnoFiltera = 0;
    }

    void Dealociraj(){
        delete[] _model;
        _model = nullptr;
        for (size_t i = 0; i < _trenutnoDokumenata; i++)
            _dokumenti[i].Dealociraj();
        delete[]_dokumenti;
        _dokumenti = nullptr;
        for (size_t i = 0; i < _trenutnoFiltera; i++)
            _filteri[i].Dealociraj();
        delete[]_filteri;
        _filteri = nullptr;
    }

    void Ispis(){
        cout << _model << crt;
        for(size_t i = 0; i < _trenutnoDokumenata; i++)
            _dokumenti[i].Ispis();
    }

    bool DodajFilter(const char *sadrzaj, Prioritet prioritet){
        for(int i=0; i<_trenutnoFiltera; i++){
            if(strcmp(_filteri[i]._sadrzaj, sadrzaj) == 0)
                return false;
        }

        Filter *temp = new Filter[_trenutnoFiltera + 1];
        for(int i=0; i<_trenutnoFiltera; i++){
            temp[i].Unos(_filteri[i]._sadrzaj, _filteri[i]._prioritet);
            _filteri[i].Dealociraj();
        }

        temp[_trenutnoFiltera].Unos(sadrzaj, prioritet);
        delete[] _filteri; _filteri = nullptr;
        _filteri = temp;
        _trenutnoFiltera++;
        return true;
    }

    bool uslovi(Dokument &dokument){
        if(dokument._sadrzaj == nullptr)
            return false;

        if(dokument._vrsta != PDF && dokument._vrsta != HTML && dokument._vrsta != DOC && dokument._vrsta != TXT)
            return false;

        for(int i=0; i<strlen(dokument._naziv); i++)
            if(isalpha(dokument._naziv[i]) == 0 && dokument._naziv[i] != 46)
                return false;

        int filteri[3] = {0};
        for(int i=0; i<_trenutnoFiltera; i++)
            if(strstr(dokument._sadrzaj, _filteri[i]._sadrzaj) != nullptr)
                filteri[(int)_filteri[i]._prioritet]++;

        if(filteri[0] > 0 || filteri[1] > 2 || filteri[2] > 3)
            return false;

        return true;
    }

    bool Printaj(Dokument &dokument){
          if(dokument._sadrzaj == nullptr)
            return false;

        bool printaj = uslovi(dokument);
        if(printaj){
            for (size_t i = 0; i < strlen(dokument._sadrzaj); i++)
			{
				if (i % BROJ_ZNAKOVA_PO_STRANICI == 0)
					cout << crt;
				cout << dokument._sadrzaj[i];
			}
        }

        Dokument *temp = new Dokument[_trenutnoDokumenata + 1];
        for(int i=0; i<_trenutnoDokumenata; i++){
            temp[i].Unos(_dokumenti[i]._vrsta, _dokumenti[i]._naziv, *_dokumenti[i]._kreiran);
            if(_dokumenti[i]._sadrzaj != nullptr)
                temp[i].DodajSadrzaj(_dokumenti[i]._sadrzaj);
        }

        temp[_trenutnoDokumenata].Unos(dokument._vrsta, dokument._naziv, *dokument._kreiran);
        if(dokument._sadrzaj != nullptr)
            temp[_trenutnoDokumenata].DodajSadrzaj(dokument._sadrzaj);

        delete[] _dokumenti; _dokumenti = nullptr;
        _dokumenti = temp;
        _trenutnoDokumenata++;

        return printaj;
    }

    float GetProsjecanBrojStranicaUPeriodu_Od_Do(DatumVrijeme OD, DatumVrijeme DO, int brojDokumenta = 0, float sumaStranica = 0, int brojPrintanihDokumenata = 0){
        if(_trenutnoDokumenata == brojDokumenta){
            return (float)sumaStranica / brojPrintanihDokumenata;
        }

        if(_dokumenti[brojDokumenta]._kreiran->getDane() >= OD.getDane() && _dokumenti[brojDokumenta]._kreiran->getDane() <= DO.getDane()){
            if(uslovi(_dokumenti[brojDokumenta]))
                return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, brojDokumenta+1, sumaStranica + _dokumenti[brojDokumenta]._brojStranica, brojPrintanihDokumenata+1);

            return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, brojDokumenta+1, sumaStranica + _dokumenti[brojDokumenta]._brojStranica, brojPrintanihDokumenata);
        }
        return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, brojDokumenta+1, brojPrintanihDokumenata, sumaStranica);
    }

    Filter *GetNakoristenijiFilter(){
        Filter *temp = nullptr;

        int ukupno = 0;
        for(int i=0; i<_trenutnoFiltera; i++){
            int trenutno = 0;
            for(int j=0; j<_trenutnoDokumenata; j++){
                if(strstr(_dokumenti[j]._sadrzaj, _filteri[i]._sadrzaj) != nullptr){
                    trenutno++;
                }
            }
            if(trenutno > ukupno){
                ukupno = trenutno;
                temp = &_filteri[i];
            }
        }
        return temp;
    }
};


int main(){

    DatumVrijeme prije3Dana; prije3Dana.Unos(3, 2, 2018, 10, 15);
    DatumVrijeme danas1; danas1.Unos(6, 2, 2018, 10, 15);
    DatumVrijeme danas2; danas2.Unos(6, 2, 2018, 10, 16);
    DatumVrijeme za10Dana; za10Dana.Unos(16, 2, 2018, 10, 15);

    Dokument ispitPRII, ispitMAT, ispitUIT, ispitUITDrugiRok;
    ispitPRII.Unos(DOC, "ispitPRII.doc", prije3Dana);
    ispitMAT.Unos(DOC, "ispitMAT.doc", danas1);
    ispitUIT.Unos(DOC, "ispitUIT.doc", danas2);
    ispitUITDrugiRok.Unos(PDF, "ispitUITDrugiRok.pdf", za10Dana);

//	/*BROJ STRANICA DOKUMENTA SE AUTOMATSKI ODREDJUJE PRILIKOM DODAVANJA SADRZAJA. ZA POTREBE ISPITA PRETPOSTAVLJAMO DA NA JEDNU
//	STRANICU MOZE STATI BROJ_ZNAKOVA_PO_STRANICI ZNAKOVA UKLJUCUJUCI RAZMAKE I DRUGE VRSTE ZNAKOVA*/
    ispitPRII.DodajSadrzaj("Programiranje ili racunarsko programiranje (engl. programming) jeste vjestina pomocu koje ");
    ispitPRII.DodajSadrzaj("korisnik stvara i izvrsava algoritme koristeci odredjene programske jezike da bi ...");
    //cout << "Broj stranica -> " << ispitPRII._brojStranica << endl;
    //cout<<strlen("Programiranje ili racunarsko programiranje (engl. programming) jeste vjestina pomocu
    //koje korisnik stvara i izvrsava algoritme koristeci odredjene programske jezike da bi ... ");

    ispitPRII.Ispis(); //ISPISUJE SVE PODATKE O DOKUMENTU

    ispitMAT.DodajSadrzaj("Matematika se razvila iz potrebe da se obavljaju proracuni u trgovini, vrse mjerenja zemljista i predvidjaju ");
    ispitMAT.DodajSadrzaj("astronomski dogadjaji, i ove tri primjene se mogu dovesti u vezu sa grubom podjelom matematike ");

    ispitMAT.Ispis();
    //cout<<"Broj stranica -> " << ispitMAT._brojStranica<<endl;
    //cout<<strlen("Matematika se razvila iz potrebe da se obavljaju proracuni u trgovini, vrse mjerenja zemljista i
    //predvidjaju astronomski dogadjaji, i ove tri primjene se mogu dovesti u vezu sa grubom podjelom matematike ");

    Printer hp3200;
    hp3200.Unos("HP 3200");
    /*PRINTER NECE DOZVOLITI PRINTANJE DOKUMENATA U CIJEM SADRZAJU SE NALAZI NEKA OD ZABRANJENIH RIJECI DEFINISANIH FILTERIMA*/
    if (hp3200.DodajFilter("RE", NIZAK)) //VISOK :)
        cout << "Filter dodan!" << endl;
    if (hp3200.DodajFilter("RAT", VISOK))
        cout << "Filter dodan!" << endl;
    if (hp3200.DodajFilter("UBITI", VISOK))
        cout << "Filter dodan!" << endl;
    if (hp3200.DodajFilter("MRZITI", VISOK))
        cout << "Filter dodan!" << endl;
    if (!hp3200.DodajFilter("RE", SREDNJI))/* ONEMOGUCITI PONAVLJANJE FILTERA, BEZ OBZIRA STO SU RAZLICITOG PRIORITETA*/
        cout << "Filter nije dodan!" << endl;

    /*
    DA BI PRINTER ISPRINTAO NEKI DOKUMENT MORAJU BITI ZADOVOLJENA SLJEDECA PRAVILA:
    1. NAZIV DOKUMENTA MOZE SADRZAVATI SAMO SLOVA, A EKSTENZIJA MOZE BITI IDENTICNA ONOJ DEFINISANOJ VRIJEDNOSCU ATRIBUTA vrstaDokumenta
    2. SADRZAJ DOKUMENTA MOZE POSJEDOVATI RIJECI DEFINISANE FILTERIMA, ALI PREMA SLJEDECIM PRAVILIMA:
    - NITI JEDNU RIJEC OZNACENU FILTEROM PRIORITETA VISOK
    - NAJVISE 2 RIJECI OZNACENE FILTEROM PRIORITETA SREDNJI
    - NAJVISE 3 RIJECI OZNACENE FILTEROM PRIORITETA NIZAK
    UKOLIKO NEKI OD NAVEDENIH USLOVA NIJE ZADOVOLJEN FUNKCIJA PRINTAJ DOKUMENT TREBA SACUVATI U NIZ _dokumenti, ALI TAJ DOKUMENT NE TREBA PRINTATI I FUNKCIJA VRACA FALSE.
    UKOLIKO DOKUMENT ISPUNJAVA SVE USLOVE ZA PRINTANJE POTREBNO JE NA KONZOLU ISPISATI SADRZAJ DOKUMENTA KOJI SE PRINTA, A SA CRT LINIJOM ODVAJATI STRANICE DOKUMENTA
    */
    if (hp3200.Printaj(ispitPRII))
        cout << endl << "Printam -> " << ispitPRII._naziv << endl;
    if (hp3200.Printaj(ispitMAT))
        cout << endl << "Printam -> " << ispitMAT._naziv << endl;
	if (hp3200.Printaj(ispitUIT))
		cout << endl << "Printam -> " << ispitUIT._naziv << endl;
	if (hp3200.Printaj(ispitUITDrugiRok))
		cout << endl << "Printam -> " << ispitUITDrugiRok._naziv << endl;

    //hp3200.Ispis();

    //PROSJECAN BROJ STRANICA = UKUPAN BROJ STRANICA / BROJ PRINTANIH DOKUMENATA
    //REKURZIVNA FUNKCIJA VRACA PROSJECAN BROJ ISPRINTANIH STRANICA (KOJE SU ZADOVOLJILE POSTAVLJENE FILTERE) U PERIODU OD (npr.prije3Dana) - DO (npr.danas2), UKLJUCUJUCI I TAJ PERIOD
	cout << endl <<"Prosjecan broj printanih stranica je -> " << hp3200.GetProsjecanBrojStranicaUPeriodu_Od_Do(prije3Dana, danas2) << crt;

    //VRACA SADRZAJ FILTERA KOJI SE NAJCESCE KORISTIO U DOKUMENTIMA
	Filter * f = hp3200.GetNakoristenijiFilter();
	if (f != nullptr && f->_sadrzaj != nullptr)
		cout << "Najcesce koristeni sadrzaj filtera je -> " << f->_sadrzaj << crt;

    //PORED VRIJEDNOSTI SVIH OSTALIH ATRIBUTA, ISPISUJE SAMO ONE DOKUMENTE KOJI ZADOVOLJAVAJU SVA PRETHODNO DEFINISANA PRAVILA
    //hp3200.Ispis();

    /*NAPISATI LAMBDA FUNKCIJU ZamijeniIPrintaj KOJA U SADRZAJU DOKUMENTA MIJENJA PRVI POSLATI PARAMETAR SA VRIJEDNOSCU DRUGOG PARAMETRA, TE VRACA BROJ ZAMIJENJENIH ZNAKOVA*/
	auto ZamijeniIPrintaj = [&hp3200](char karakter, char zamjena, DatumVrijeme datum) -> int {
        int brojZamjenjenihZnakova = 0;
        for(int i=0; i<hp3200._trenutnoDokumenata; i++){
            if(hp3200.uslovi(hp3200._dokumenti[i]) && hp3200._dokumenti[i]._kreiran->getDane() == datum.getDane()){
                for(int j=0; j<strlen(hp3200._dokumenti[i]._sadrzaj); j++){
                    if(hp3200._dokumenti[i]._sadrzaj[j] == karakter){
                        hp3200._dokumenti[i]._sadrzaj[j] = zamjena;
                        brojZamjenjenihZnakova++;
                    }
                }
            }
        }
        return brojZamjenjenihZnakova;
	};
    //RAZMAK MIJENJA ZNAKOM CRTICA U SADRZAJU DOKUMENATA KOJI SU PRINTANI danas1
	int zamijenjeno = ZamijeniIPrintaj(' ', '-', danas1);
	cout << "Zamijenjeno -> " << zamijenjeno << " znakova" << endl;
	hp3200.Ispis();

	prije3Dana.Dealociraj(); danas1.Dealociraj(); danas2.Dealociraj(); za10Dana.Dealociraj();
	ispitMAT.Dealociraj(); ispitPRII.Dealociraj(); ispitUIT.Dealociraj(); ispitUITDrugiRok.Dealociraj();

    hp3200.Dealociraj();

    return 0;
}
